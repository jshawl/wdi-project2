<% def generateVote event %>
  <% diff = event.get_upvotes.size-event.get_downvotes.size %>
  <% diffClass = (diff<0) ? "neg" : "pos" %>
  <% if current_user.voted_for?event %>
    <% if current_user.voted_up_on?event %>
      <% user_vote='voted' %>
      <%= link_to '',unvote_event_path(event), class:"#{user_vote}", method: :put %>
      <div class="<%= diffClass %>"><%= diff %></div>
      <%= link_to '',downvote_event_path(event), method: :put %>
    <% else %>
      <% user_vote='voted' %>
      <%= link_to '',upvote_event_path(event), method: :put %>
      <div class="<%= diffClass %>"><%= diff %></div>
      <%= link_to '',unvote_event_path(event), class:"#{user_vote}", method: :put %>
    <% end %>
  <% else %>
    <%= link_to '',upvote_event_path(event), method: :put %>
    <div class="<%= diffClass %>"><%= diff %></div>
    <%= link_to '',downvote_event_path(event), method: :put %>
  <% end %>
<% end %>

<div id='tags' class='tags dark cf'>
  <% @recent_taggings.each do |tag| %>
  <div class="tag right btn" tag="<%= tag[:tag].tag %>">
    <%= tag[:tag].tag %>
    <% if tag[:count] > 1 %>
      <%=  "x#{tag[:count]}" %>
    <% end %>
  </div>
  <% end %>
</div>

<div id='newEvent' class='form-show btn'>Create an Event</div>
<% if @events %>
<div class='list dark'>
  <% @events.each do |event| %>
  <div class='list-item event' event-id='<%= event.id %>'>
    <!-- voting -->
    <div class="vote-container" id='v<%= event.id %>'>
    <div class='votes'>
      <% generateVote(event) %>
    </div>
    </div>
    <!-- voting -->
    <p><%= link_to event.title,event,class:'page-link' %></p>
    <p><%= event.location.name %></p>
    <p><%= event.when.strftime("at%l:%M%p") %></p>
    <% if event.owner == current_user %>
      <%= link_to "edit event", edit_event_path(event), class:'btn' %>
      <%= link_to "delete event", event_path(event), class:'btn', method: :delete %>
    <% end %>
  </div>
  <% end %>
</div>
<% end %>
<div id='map' class='map'></div>
<div id='newLocation' class='form-show btn'>Add a Location</div>

<div class="form-container hide">
  <div class='inner-form event-form'>
    <%= render partial: "form" %>
    <a href="#" class='cancel top-right btn'>X</a>
  </div>
  <div class="inner-form location-form">
    <%= render partial: "locations/form" %>
    <a href="#" class='cancel top-right btn'>X</a>
  </div>
</div>
<script>
// form show/hide
var newE = document.getElementById('newEvent');
var newL = document.getElementById('newLocation');
var formC = document.querySelector('.form-container');
var formS = formC.querySelector('input[type=submit]');
var cancel = document.querySelectorAll('.cancel');
newE.addEventListener("click", function(){
  formC.className = 'form-container show'
  formC.querySelector('.event-form').style.display="block";
  formC.querySelector('.location-form').style.display="none";
});
newL.addEventListener("click", function(){
  formC.className = 'form-container show'
  formC.querySelector('.event-form').style.display="none";
  formC.querySelector('.location-form').style.display="block";
});
formS.addEventListener("click",function(){
  formC.className = 'form-container hide';
});
for (var i=0;i<cancel.length;i++){
  cancel[i].addEventListener("click",function(){
    formC.className = 'form-container hide';
  });
}

//map
L.mapbox.accessToken = "pk.eyJ1IjoiY2hhc2VncnViZXIiLCJhIjoidV9tdHNYSSJ9.RRyvDLny4YwDwzPCeOJZrA";
var features = [
  <% @events.each do |event| %>
  { "type": "Feature",
    "geometry": {"type": "Point", "coordinates": [<%= event.location.longitude %>, <%= event.location.latitude %>]},
    "properties": {
      "title":"<%= event.title %>",
      "event_id":"<%= event.id %>",
      "location":"<%= event.location.name %>",
      "address":"<%= event.location.address %>",
      "time":"<%= event.when.strftime("at%l:%M%p") %>",
      "attendees":"<%= event.users.size %>",
      "tags":[<% event.tags.each do |tag| %>
          "<%= tag.tag %>",
        <% end %>]
    }
  },
<% end %>
]

var geojson = { "type": "FeatureCollection",
    "features":features}

var events = L.geoJson(geojson);

var map = L.mapbox.map('map', 'mapbox.dark',{minZoom:3,maxZoom:18,zoomControl:false})
new L.Control.Zoom({ position: 'topright' }).addTo(map);
map.fitBounds(events.getBounds())

function generatePopup(pt){
  // var popup = "<p class='title'>"+pt.feature.properties.title+"</p>";
  var popup = "<p class='title'><a href='/events/"+pt.feature.properties.event_id+"'>"
  popup += pt.feature.properties.title+"</a></p>"
  popup += "<p>"+pt.feature.properties.location+"</p>";
  popup += "<p>"+pt.feature.properties.address+"</p>";
  popup += "<p>"+pt.feature.properties.time+"</p>";
  var vote = document.getElementById('v'+pt.feature.properties.event_id);
  popup += "<div class='popup-vote'>";
  popup += vote.innerHTML;
  popup += "</div>"
  return popup
}

var selectedGrp = L.featureGroup().addTo(map);
var tagGrp = L.featureGroup().addTo(map);
var ptGrp = L.featureGroup().addTo(map);
//load and style map data
events.eachLayer(function(pt){
  var marker = L.marker([pt.feature.geometry.coordinates[1],pt.feature.geometry.coordinates[0]])
    .setIcon(
      L.divIcon({
        className: "eventMarker",
        iconSize:[
          5+(parseInt(pt.feature.properties.attendees))/*/(<%= @max %>)*30)*/
          ,5+(parseInt(pt.feature.properties.attendees))/*/(<%= @max %>)*30)*/
        ],
        popupAnchor:[0,-10]
      })
    ).bindPopup(generatePopup(pt))
    .addTo(ptGrp);
});

function tagClick(){
  tagGrp.clearLayers();
  if ($(this).hasClass('clicked')){
    $(this).removeClass('clicked');
    return;
  }
  var tag = this.getAttribute('tag');
  $('.tag.clicked').removeClass('clicked');
  $(this).addClass('clicked');
  events.eachLayer(function(pt){

    if (pt.feature.properties.tags.indexOf(tag) !== -1){
      var marker = L.marker([pt.feature.geometry.coordinates[1],pt.feature.geometry.coordinates[0]])
        .setIcon(
          L.divIcon({
            className: "tagMarker",
            iconSize:[
              5+parseInt(pt.feature.properties.attendees)<%= "*30/#{@max}" %>
              ,5+parseInt(pt.feature.properties.attendees)<%= "*30/#{@max}" %>
            ],
            popupAnchor:[0,-10]
          })
        ).bindPopup(generatePopup(pt))
        .addTo(tagGrp);
    }
  })
}

function eventHover(){
  selectedGrp.clearLayers();
  var event_id = this.getAttribute('event-id');
  events.eachLayer(function(pt){
    if (pt.feature.properties.event_id == event_id){
      var marker = L.marker([pt.feature.geometry.coordinates[1],pt.feature.geometry.coordinates[0]])
        .setIcon(
          L.divIcon({
            className: "thisMarker",
            iconSize:[40,40],
            popupAnchor:[0,-10]
          })
        ).bindPopup(generatePopup(pt))
        .addTo(selectedGrp);
    }
    return;
  })
}
function eventUnhover(){
  selectedGrp.clearLayers();
}

$(".tag").on("click", tagClick);
$(".event").on("mouseover", eventHover);
$(".event").on("mouseout", eventUnhover);

</script>

<script type="text/javascript">
$(document).ready(function () {
    $("#location-field").tokenInput("/locations",{
    tokenValue: "id",
    propertyToSearch: "name",
    noResultsText: "Can't find a match",
    searchingText: "Searching...",
    minChars: 3,
    tokenLimit:1
  });
});
</script>
